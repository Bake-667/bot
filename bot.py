import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
TOKEN = os.getenv("TOKEN")

questions = [
    {
        "question": "üåç –ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ—Ç—å—è –æ—Ç –°–æ–ª–Ω—Ü–∞?",
        "options": ["–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è"],
        "answer_index": 2
    },
    {
        "question": "üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥–æ—Ä–æ–¥–æ–≤ –≤ –º–æ–ª–µ–∫—É–ª–µ –≤–æ–¥—ã?",
        "options": ["1", "2", "3"],
        "answer_index": 1
    },
    {
        "question": "‚ö° –ö—Ç–æ –∏–∑–æ–±—Ä—ë–ª –ª–∞–º–ø–æ—á–∫—É?",
        "options": ["–≠–¥–∏—Å–æ–Ω", "–ù—å—é—Ç–æ–Ω", "–≠–π–Ω—à—Ç–µ–π–Ω"],
        "answer_index": 0
    },
    {
        "question": "üß¨ –°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?",
        "options": ["46", "44", "48"],
        "answer_index": 0
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info'),
            InlineKeyboardButton("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='quiz'),
            InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

async def go_back(query):
    keyboard = [
        [
            InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info'),
            InlineKeyboardButton("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='quiz'),
            InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def send_question(query, context):
    index = context.user_data.get("quiz_index", 0)
    if index >= len(questions):
        score = context.user_data.get("score", 0)
        await query.edit_message_text("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ú–æ–ª–æ–¥–µ—Ü.")
await query.edit_message_text(f"–¢—ã –Ω–∞–±—Ä–∞–ª {score} –∏–∑ {len(questions)} –±–∞–ª–ª–æ–≤.")
        return

    q = questions[index]
    keyboard = [
        [InlineKeyboardButton(f"A. {q['options'][0]}", callback_data='0')],
        [InlineKeyboardButton(f"B. {q['options'][1]}", callback_data='1')],
        [InlineKeyboardButton(f"C. {q['options'][2]}", callback_data='2')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')],
    ]
    await query.edit_message_text(q['question'], reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'info':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç Ergo. –ü–æ–∫–∞ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'support':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        await query.edit_message_text("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ: @kutukanas", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'back':
        await go_back(query)

    elif data == 'quiz':
        context.user_data["quiz_index"] = 0
        context.user_data["score"] = 0
        await send_question(query, context)

    elif data in ['0', '1', '2']:
        index = context.user_data.get("quiz_index", 0)
        question = questions[index]
        correct = int(data) == question['answer_index']
        if correct:
            context.user_data["score"] = context.user_data.get("score", 0) + 1
        text = "‚úÖ –í–µ—Ä–Ω–æ!" if correct else f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['answer_index']]}"
        context.user_data["quiz_index"] += 1
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data='next')]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'next':
        await send_question(query, context)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()
